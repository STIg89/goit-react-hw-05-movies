{"version":3,"file":"static/js/415.115cdd05.chunk.js","mappings":"oMAEaA,EAAYC,EAAAA,GAAAA,IAAH,iIAQTC,EAAcD,EAAAA,GAAAA,IAAH,kfAwBXE,EAAYF,EAAAA,GAAAA,EAAH,+I,uCC9BTG,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACjC,OACE,SAACT,EAAD,WACE,UAAC,KAAD,CAAMU,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMR,GAA1C,WACE,gBACES,IACkB,OAAhBN,EAAA,0CACuCA,GACnCO,EAENC,IAAKP,KAEP,SAACP,EAAD,UAAYO,QAVEC,EAcrB,KAGN,C,sGCJD,UAnBa,WACX,OAA0CO,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACRD,GAAU,IACVE,EAAAA,EAAAA,MAAoBC,MAAK,SAAAC,GACvBN,GAAiB,OAAIM,IACrBJ,GAAU,EACX,GACF,GAAE,KAGD,4BACGD,IAAU,SAAC,IAAD,IACVF,IAAiB,SAAC,IAAD,CAAYd,OAAQc,MAG3C,C,4MCpBKQ,EAAU,mCACVC,EAAW,+BAEJJ,EAAiB,mCAAG,6GAENK,EAAAA,EAAAA,IAAA,UAClBD,EADkB,uCACqBD,IAHf,cAEvBD,EAFuB,yBAKtBA,EAASI,KAAKC,SALQ,gCAO7BC,EAAAA,OAAAA,QAAe,oBACfC,QAAQC,IAAR,MAR6B,yDAAH,qDAYjBC,EAAY,mCAAG,WAAMC,GAAN,gGAEDP,EAAAA,EAAAA,IAAA,UAClBD,EADkB,iCACeD,EADf,kBACgCS,IAH/B,cAKa,KAH/BV,EAFkB,QAKXI,KAAKC,QAAQM,QACxBL,EAAAA,OAAAA,QAAe,mCANO,kBAQjBN,EAASI,KAAKC,SARG,gCAUxBC,EAAAA,OAAAA,QAAe,oBACfC,QAAQC,IAAR,MAXwB,yDAAH,sDAeZI,EAAe,mCAAG,WAAMC,GAAN,gGAEJV,EAAAA,EAAAA,IAAA,UAClBD,EADkB,kBACAW,EADA,oBACmBZ,IAHf,cAErBD,EAFqB,yBAKpBA,EAASI,MALW,gCAO3BE,EAAAA,OAAAA,QAAe,oBACfC,QAAQC,IAAR,MAR2B,yDAAH,sDAYfM,EAAe,mCAAG,WAAMD,GAAN,gGAEJV,EAAAA,EAAAA,IAAA,UAClBD,EADkB,kBACAW,EADA,4BAC2BZ,IAHvB,cAKO,KAH5BD,EAFqB,QAKdI,KAAKW,KAAKJ,QACrBL,EAAAA,OAAAA,QAAe,6BANU,kBAQpBN,EAASI,KAAKW,MARM,gCAU3BT,EAAAA,OAAAA,QAAe,oBACfC,QAAQC,IAAR,MAX2B,yDAAH,sDAefQ,EAAe,mCAAG,WAAMH,GAAN,gGAEJV,EAAAA,EAAAA,IAAA,UAClBD,EADkB,kBACAW,EADA,4BAC2BZ,IAHvB,cAKU,KAH/BD,EAFqB,QAKdI,KAAKC,QAAQM,QACxBL,EAAAA,OAAAA,QAAe,+BANU,kBAQpBN,EAASI,KAAKC,SARM,gCAU3BC,EAAAA,OAAAA,QAAe,oBACfC,QAAQC,IAAR,MAX2B,yDAAH,qD","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home.jsx","services/fetchAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 16px;\n  padding-bottom: 40px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  transition: transform 0.3s;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n\n  &:hover {\n    transform: scale(1.05);\n    transition: 300ms linear;\n    box-shadow: 4px 4px 6px 0px rgba(0, 0, 0, 0.9);\n  }\n\n  > a {\n    text-decoration: none;\n  }\n\n  img {\n    max-width: 400px;\n  }\n`;\n\nexport const MovieName = styled.p`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n  font-weight: 700;\n  text-align: center;\n`;\n","import { CardWrapper, Container, MovieName } from './MoviesList.styled';\nimport { Link, useLocation } from 'react-router-dom';\nimport noPoster from 'img/sorry.png';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Container>\n      {movies.map(({ poster_path, title, id }) => {\n        return (\n          <CardWrapper key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                src={\n                  poster_path !== null\n                    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                    : noPoster\n                }\n                alt={title}\n              />\n              <MovieName>{title}</MovieName>\n            </Link>\n          </CardWrapper>\n        );\n      })}\n    </Container>\n  );\n};\n","import { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useState, useEffect } from 'react';\nimport { getTrendingMovies } from 'services/fetchAPI';\nimport { Loader } from 'utils/spinner/spinner';\n\nconst Home = () => {\n  const [trendingFilms, setTrendingFilms] = useState(null);\n  const [onLoad, setOnLoad] = useState(false);\n\n  useEffect(() => {\n    setOnLoad(true);\n    getTrendingMovies().then(response => {\n      setTrendingFilms([...response]);\n      setOnLoad(false);\n    });\n  }, []);\n\n  return (\n    <main>\n      {onLoad && <Loader />}\n      {trendingFilms && <MoviesList movies={trendingFilms} />}\n    </main>\n  );\n};\nexport default Home;\n","import axios from 'axios';\nimport { Notify } from 'notiflix';\n\nconst API_KEY = 'e57746b2e4fe98cb5cc839cb405a15f1';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    Notify.failure('Oops...Try again');\n    console.log(error);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    if (response.data.results.length === 0) {\n      Notify.warning('Oops...There are no such movies');\n    }\n    return response.data.results;\n  } catch (error) {\n    Notify.failure('Oops...Try again');\n    console.log(error);\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    Notify.failure('Oops...Try again');\n    console.log(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    if (response.data.cast.length === 0) {\n      Notify.warning('Oops...There are no casts');\n    }\n    return response.data.cast;\n  } catch (error) {\n    Notify.failure('Oops...Try again');\n    console.log(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    if (response.data.results.length === 0) {\n      Notify.warning('Oops...There are no reviews');\n    }\n    return response.data.results;\n  } catch (error) {\n    Notify.failure('Oops...Try again');\n    console.log(error);\n  }\n};\n"],"names":["Container","styled","CardWrapper","MovieName","MoviesList","movies","location","useLocation","map","poster_path","title","id","to","state","from","src","noPoster","alt","useState","trendingFilms","setTrendingFilms","onLoad","setOnLoad","useEffect","getTrendingMovies","then","response","API_KEY","BASE_URL","axios","data","results","Notify","console","log","searchMovies","query","length","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}